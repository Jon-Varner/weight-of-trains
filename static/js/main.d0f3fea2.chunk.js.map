{"version":3,"sources":["GameChart.js","App.js","serviceWorker.js","index.js"],"names":["Parser","require","gameData","GameChart","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","convertMinsToHrsMins","mins","h","Math","floor","m","concat","onHighlight","key","gameid","String","setState","externalMutations","childName","target","eventKey","mutation","active","onResetHighlight","onSort","event","state","chartData","x","y","title","gameDetails","undefined","inherits","createClass","value","_this2","gameIDs","map","a","i","join","fetch","then","response","text","parse","ignoreAttributes","parseAttributeValue","attributeNamePrefix","items","item","cd","forEach","game","_id","statistics","ratings","averageweight","_value","playingtime","_this3","newDetails","react_default","createElement","className","victory_chart","domain","victory_label","angle","textAnchor","victory_axis","tickValues","dependentAxis","tickFormat","victory_scatter","name","size","datum","labels","labelComponent","victory_tooltip","data","externalEventMutations","events","eventHandlers","onMouseOver","onMouseOut","onClick","e","index","gameName","mechanics","Array","isArray","replace","link","_type","substring","length","data-item","data-dir","data-type","ranks","rank","href","React","Component","App","GameChart_GameChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0f3fea2.chunk.js","sourcesContent":["import React from 'react';\r\nimport { VictoryScatter, VictoryChart, VictoryAxis, VictoryTooltip, VictoryLabel } from 'victory';\r\n\r\nlet Parser = require('fast-xml-parser');\r\nlet gameData = {};\r\n\r\nexport class GameChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);    \r\n\r\n        this.state = {\r\n            /*  Unfortunately, the BGG API does not support returning a list of games by category,\r\n                or even a list of top ranked games, so I hard-coded these IDs.\r\n                I also hard-coded the titles just so this array is meaningful to anyone who reads it. */\r\n            chartData: [\r\n                {x: 1, y: 1, gameid: 144733, title: 'Russian Railroads' },\r\n                {x: 1, y: 1, gameid: 14996, title: 'Ticket To Ride: Europe'},\r\n                {x: 1, y: 1, gameid: 17133, title: 'Railways of the World'},\r\n                {x: 1, y: 1, gameid: 31627, title: 'Ticket to Ride: Nordic Countries'},  \r\n                {x: 1, y: 1, gameid: 27833, title: 'Steam'},\r\n                {x: 1, y: 1, gameid: 4098, title: 'Age of Steam'},\r\n                {x: 1, y: 1, gameid: 9209, title: 'Ticket To Ride'},  \r\n                {x: 1, y: 1, gameid: 421, title: '1830: Railways & Robber Barons'},\r\n                {x: 1, y: 1, gameid: 21348, title: 'Ticket To Ride: MÃ¤rklin'},  \r\n                {x: 1, y: 1, gameid: 158899, title: 'Colt Express'},\r\n                {x: 1, y: 1, gameid: 206941, title: 'First Class: All Aboard the Orient Express!'},  \r\n                {x: 1, y: 1, gameid: 119432, title: 'Snowdonia'},  \r\n                {x: 1, y: 1, gameid: 31730, title: 'Chicago Express'},  \r\n                {x: 1, y: 1, gameid: 121408, title: 'Trains'}, \r\n                {x: 1, y: 1, gameid: 17405, title: '1846: The Race for the Midwest'}, \r\n                {x: 1, y: 1, gameid: 94, title: 'Union Pacific'}, \r\n                {x: 1, y: 1, gameid: 207691, title: 'Railroad Revolution'}, \r\n                {x: 1, y: 1, gameid: 157001, title: 'Trains: Rising Sun'}, \r\n                {x: 1, y: 1, gameid: 221318, title: 'Whistle Stop'},   \r\n                {x: 1, y: 1, gameid: 423, title: '1856: Railroading in Upper Canada from 1856'}, \r\n                {x: 1, y: 1, gameid: 2842, title: 'TransAmerica'},  \r\n                {x: 1, y: 1, gameid: 168, title: 'Empire Builder'},  \r\n                {x: 1, y: 1, gameid: 37387, title: 'Steel Driver'},  \r\n                {x: 1, y: 1, gameid: 24773, title: 'On the Underground'},  \r\n                {x: 1, y: 1, gameid: 204, title: 'Stephenson\\'s Rocket'},   \r\n                {x: 1, y: 1, gameid: 157, title: 'Eurorails'},   \r\n                {x: 1, y: 1, gameid: 166571, title: 'Tramways'},   \r\n                {x: 1, y: 1, gameid: 23540, title: '1889: History of Shikoku Railways'},   \r\n                {x: 1, y: 1, gameid: 41749, title: 'American Rails'}\r\n            ],\r\n            gameDetails: [],\r\n            externalMutations: undefined /* Used by Victory tables to respond to events from outside elements */\r\n        } \r\n    }\r\n      \r\n    componentDidMount() {\r\n        let gameIDs = this.state.chartData.map( (a, i) => `${a.gameid}`).join(',');\r\n\r\n        fetch('https://www.boardgamegeek.com/xmlapi2/thing?stats=1&id=' + gameIDs)\r\n            .then(response => response.text())\r\n            .then(text => {\r\n            const options = {\r\n                ignoreAttributes : false,\r\n                parseAttributeValue : true,\r\n                attributeNamePrefix : \"_\" \r\n            }\r\n\r\n            /* The BGG API returns XML, so it needs to be converted to JSON */\r\n            gameData = Parser.parse(text, options);\r\n\r\n            this.setState({ gameDetails: gameData.items.item })         \r\n\r\n            let cd = this.state.chartData;\r\n\r\n            /* I'm pulling only the details needed for the chart (playing time and average weight) */\r\n            cd.forEach( (game) => {\r\n                this.state.gameDetails.forEach( (item) => {\r\n                    if (game.gameid === item._id) {\r\n                        game.x = item.statistics.ratings.averageweight._value;\r\n                        game.y = item.playingtime._value;\r\n                        this.setState({ chartData: cd })\r\n                    }\r\n                })\r\n            })\r\n        });\r\n    } \r\n\r\n    convertMinsToHrsMins = (mins) => {\r\n        let h = Math.floor(mins / 60);\r\n        let m = mins % 60;\r\n        m = m < 10 ? '0' + m : m;\r\n        return `${h}:${m}`;\r\n    }\r\n\r\n    /* These show and hide the tooltips on the Victory chart when the title is hovered in the table. */\r\n    onHighlight = (key) => {\r\n        const gameid = String(key);\r\n\r\n        this.setState({\r\n            externalMutations: [{\r\n                childName: \"data\",\r\n                target: \"labels\",\r\n                eventKey: gameid,\r\n                mutation: () => ({ active: true })\r\n            }]\r\n        });\r\n    }\r\n\r\n    onResetHighlight = (key) => {\r\n        const gameid = String(key);\r\n\r\n        this.setState({\r\n            externalMutations: [{\r\n                childName: \"data\",\r\n                target: \"labels\",\r\n                eventKey: gameid,\r\n                mutation: () => ({ active: false })\r\n            }]\r\n        });\r\n    }\r\n\r\n    /* Placeholder for possible future functionality */\r\n    onSort = (event, key) => {\r\n        /*\r\n        TODO: Need to pull object values into arrays to make this table sortable\r\n\r\n        const data = this.state.gameDetails;\r\n        data.sort((a,b) => a[key].localeCompare(b[key]));\r\n        this.setState({ gameDetails: data});\r\n        */\r\n    }\r\n\r\n    render() {\r\n        let newDetails = this.state.gameDetails;\r\n\r\n        return (\r\n            <article>\r\n                <div className=\"chart-container\">\r\n                    <VictoryChart\r\n                    domain={{ x: [1,5], y: [0,400] }}\r\n                    >\r\n                        <VictoryLabel text=\"Playing time\" x={5} y={140} angle=\"-90\" textAnchor=\"middle\"/>\r\n                        <VictoryLabel text=\"Weight\" x={225} y={290} textAnchor=\"middle\"/>\r\n                        \r\n                        <VictoryAxis\r\n                        tickValues={[1, 2, 3, 4, 5]}\r\n                        />                    \r\n                        <VictoryAxis\r\n                        dependentAxis\r\n                        tickValues={[60, 120, 180, 240, 300, 360 ]}\r\n                        tickFormat={(x) => (`${this.convertMinsToHrsMins(x)}`)}\r\n                        />    \r\n                        <VictoryScatter\r\n                        name=\"dot\"\r\n                        size={(datum, active) => active ? 3 : 2}\r\n                        eventKey={(datum) => datum.gameid}\r\n                        labels={(datum) => datum.title}\r\n                        labelComponent={<VictoryTooltip/>}\r\n                        data={this.state.chartData}\r\n                        externalEventMutations={this.state.externalMutations}\r\n                        events={[\r\n                            {\r\n                                target: \"data\",\r\n                                eventHandlers: {\r\n                                    onMouseOver: () => {\r\n                                        return [\r\n                                            {\r\n                                                target: \"labels\",\r\n                                                mutation: () => {\r\n                                                    return { active: true };\r\n\r\n                                                }\r\n                                            }\r\n                                        ];\r\n  \r\n                                    },\r\n  \r\n                                    onMouseOut: () => {\r\n                                        return [\r\n                                            {\r\n                                                target: \"labels\",\r\n                                                mutation: () => {\r\n                                                    return { active: false };\r\n                                                }\r\n                                            }\r\n                                        ];\r\n                                    }\r\n                                }\r\n                            }\r\n                          ]}                        \r\n                        />\r\n                    </VictoryChart>\r\n                </div>\r\n                {/* Note that sorting is not yet functional */}\r\n                <table className=\"sortable-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th onClick={e => this.onSort(e, 'rank')}>Rank</th>\r\n                            <th onClick={e => this.onSort(e, 'title')}>Title</th>\r\n                            <th onClick={e => this.onSort(e, 'mechanics')}>Mechanics</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {newDetails.map((game, index) => {\r\n                            let gameName='';\r\n                            let mechanics = '';\r\n\r\n                            /* Ideally this would get replaced by a full regex, but for now these are the only special characters \r\n                               we need to worry about\r\n                            */\r\n                            if(Array.isArray(game.name)) {\r\n                                gameName = game.name[0]._value.replace('&#039;', '\\'').replace('&amp;', '&');\r\n                            } else {\r\n                                gameName = game.name._value.replace('&#039;', '\\'').replace('&amp;', '&');;\r\n                            }\r\n\r\n                            game.link.forEach( (item) => {\r\n                                if (item._type==='boardgamemechanic') {\r\n                                    mechanics = mechanics + item._value + ', ';\r\n                                }\r\n                            })\r\n\r\n                            mechanics = mechanics.substring(0, mechanics.length-2);\r\n\r\n                            return (\r\n                                <tr key={index} data-item={game._id} data-dir=\"asc\" onMouseOver={() => this.onHighlight(game._id)} onMouseOut={() => this.onResetHighlight(game._id)}>\r\n                                    <td data-type=\"rank\">{game.statistics.ratings.ranks.rank[0]._value}</td>\r\n                                    <td data-type=\"title\">{gameName} <a className=\"link-button\" href={'https://www.boardgamegeek.com/boardgame/'+game._id}>&gt;</a></td>\r\n                                    <td data-type=\"mechanics\">{mechanics}</td>\r\n                                </tr>\r\n                            );\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </article>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { GameChart } from './GameChart';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: 'The Weight of Trains'\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>{this.state.title}</h1>\n        <GameChart />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}