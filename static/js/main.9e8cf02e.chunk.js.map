{"version":3,"sources":["components/GameChart/GameChart.module.scss","components/GameTable/GameTable.module.scss","components/GameChart/GameChart.js","components/GameTable/GameTable.js","containers/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","chartContainer","linkButton","gameChart","props","data","Object","toConsumableArray","map","item","x","weight","y","playingTime","console","log","react_default","a","createElement","className","classes","victory_chart","domain","victory_label","text","angle","textAnchor","victory_axis","tickValues","dependentAxis","tickFormat","concat","convert","victory_scatter","name","size","datum","active","eventKey","id","labels","title","labelComponent","victory_tooltip","externalEventMutations","mutations","events","target","eventHandlers","onMouseOver","mutation","onMouseOut","gameTable","onClick","e","sorted","data-direction","game","index","key","data-item","mousedOver","mousedOut","data-type","rank","href","_id","mechanics","gameBasics","gameid","Layout","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","gameDetails","externalMutations","undefined","convertMinsToHrsMins","mins","h","Math","floor","m","onHighlight","String","setState","childName","onResetHighlight","onSort","event","arr","currentTarget","dataset","direction","sort","b","isNaN","localeCompare","setAttribute","inherits","createClass","value","_this2","gameIDs","i","join","fetch","then","response","gameData","require","parse","ignoreAttributes","parseAttributeValue","attributeNamePrefix","keys","items","reduced","forEach","obj","isArray","_value","replace","statistics","ratings","ranks","link","_type","substring","averageweight","playingtime","push","GameChart","GameTable","Component","App","Layout_Layout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e8cf02e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartContainer\":\"GameChart_chartContainer__1wvoo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"linkButton\":\"GameTable_linkButton__1adLs\"};","import React from 'react';\r\nimport { VictoryScatter, VictoryChart, VictoryAxis, VictoryTooltip, VictoryLabel } from 'victory';\r\n\r\nimport classes from './GameChart.module.scss';\r\n\r\nconst gameChart = (props) => {\r\n\r\n    let data = [...props.data];\r\n\r\n    data.map(item => { item.x = item.weight; item.y = item.playingTime;});\r\n\r\n    console.log(data);\r\n\r\n    return (\r\n        <div className={classes.chartContainer}>\r\n            <VictoryChart\r\n            domain={{ x: [1,5], y: [0,400] }}\r\n            >\r\n                <VictoryLabel text=\"Playing time\" x={5} y={140} angle=\"-90\" textAnchor=\"middle\"/>\r\n                <VictoryLabel text=\"Weight\" x={225} y={290} textAnchor=\"middle\"/>\r\n                \r\n                <VictoryAxis\r\n                tickValues={[1, 2, 3, 4, 5]}\r\n                />                    \r\n                <VictoryAxis\r\n                dependentAxis\r\n                tickValues={[60, 120, 180, 240, 300, 360 ]}\r\n                tickFormat={(x) => (`${props.convert(x)}`)}\r\n                />    \r\n                <VictoryScatter\r\n                name=\"dot\"\r\n                size={(datum, active) => active ? 3 : 2}\r\n                eventKey={(datum) => datum.id}\r\n                labels={(datum) => datum.title}\r\n                labelComponent={<VictoryTooltip/>}\r\n                data={data}\r\n                externalEventMutations={props.mutations}\r\n                events={[\r\n                    {\r\n                        target: \"data\",\r\n                        eventHandlers: {\r\n                            onMouseOver: () => {\r\n                                return [\r\n                                    {\r\n                                        target: \"labels\",\r\n                                        mutation: () => {\r\n                                            return { active: true };\r\n\r\n                                        }\r\n                                    }\r\n                                ];\r\n\r\n                            },\r\n\r\n                            onMouseOut: () => {\r\n                                return [\r\n                                    {\r\n                                        target: \"labels\",\r\n                                        mutation: () => {\r\n                                            return { active: false };\r\n                                        }\r\n                                    }\r\n                                ];\r\n                            }\r\n                        }\r\n                    }\r\n                ]}                        \r\n                />\r\n            </VictoryChart>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default gameChart;","import React from 'react';\r\n\r\nimport classes from './GameTable.module.scss';\r\n\r\nconst gameTable = (props) => {\r\n    return (\r\n                /* Note that sorting is not yet functional */\r\n        <table className=\"sortable-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th onClick={e => props.sorted(e, 'rank')} data-direction='asc'>Rank</th>\r\n                    <th onClick={e => props.sorted(e, 'title')} data-direction='asc'>Title</th>\r\n                    <th onClick={e => props.sorted(e, 'mechanics')} data-direction='asc'>Mechanics</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.data.map((game, index) => {\r\n                    return (\r\n                        <tr \r\n                            key={index} \r\n                            data-item={game.id} \r\n                            onMouseOver={() => props.mousedOver(game.id)} \r\n                            onMouseOut={() => props.mousedOut(game.id)}>\r\n                            <td data-type=\"rank\">{game.rank}</td>\r\n                            <td data-type=\"title\">{game.title} <a className={classes.linkButton} href={'https://www.boardgamegeek.com/boardgame/'+game._id}>&gt;</a></td>\r\n                            <td data-type=\"mechanics\">{game.mechanics}</td>\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n\r\n    )\r\n}\r\n\r\nexport default gameTable;","import React, { Component } from 'react';\r\n\r\nimport GameChart from '../../components/GameChart/GameChart';\r\nimport GameTable from '../../components/GameTable/GameTable';\r\n\r\n/*  Unfortunately, the BGG API does not support returning a list of games by category,\r\nor even a list of top ranked games, so I hard-coded these IDs.\r\nI also hard-coded the titles just so this array is meaningful to anyone who reads it. */\r\nlet gameBasics = [\r\n    {gameid: 144733, title: 'Russian Railroads' },\r\n    {gameid: 14996, title: 'Ticket To Ride: Europe'},\r\n    {gameid: 17133, title: 'Railways of the World'},\r\n    {gameid: 31627, title: 'Ticket to Ride: Nordic Countries'},  \r\n    {gameid: 27833, title: 'Steam'},\r\n    {gameid: 4098, title: 'Age of Steam'},\r\n    {gameid: 9209, title: 'Ticket To Ride'},  \r\n    {gameid: 421, title: '1830: Railways & Robber Barons'},\r\n    {gameid: 21348, title: 'Ticket To Ride: Märklin'},  \r\n    {gameid: 158899, title: 'Colt Express'},\r\n    {gameid: 206941, title: 'First Class: All Aboard the Orient Express!'},  \r\n    {gameid: 119432, title: 'Snowdonia'},  \r\n    {gameid: 31730, title: 'Chicago Express'},  \r\n    {gameid: 121408, title: 'Trains'}, \r\n    {gameid: 17405, title: '1846: The Race for the Midwest'}, \r\n    {gameid: 94, title: 'Union Pacific'}, \r\n    {gameid: 207691, title: 'Railroad Revolution'}, \r\n    {gameid: 157001, title: 'Trains: Rising Sun'}, \r\n    {gameid: 221318, title: 'Whistle Stop'},   \r\n    {gameid: 423, title: '1856: Railroading in Upper Canada from 1856'}, \r\n    {gameid: 2842, title: 'TransAmerica'},  \r\n    {gameid: 168, title: 'Empire Builder'},  \r\n    {gameid: 37387, title: 'Steel Driver'},  \r\n    {gameid: 24773, title: 'On the Underground'},  \r\n    {gameid: 204, title: 'Stephenson\\'s Rocket'},   \r\n    {gameid: 157, title: 'Eurorails'},   \r\n    {gameid: 166571, title: 'Tramways'},   \r\n    {gameid: 23540, title: '1889: History of Shikoku Railways'},   \r\n    {gameid: 41749, title: 'American Rails'},\r\n    {gameid: 138704, title: 'Northern Pacific'}                \r\n    ];\r\n\r\nexport class Layout extends Component {\r\n    state = {\r\n        gameDetails: [],\r\n        externalMutations: undefined /* Used by Victory charts to respond to events from outside elements */\r\n    } \r\n\r\n    componentDidMount() {\r\n        let gameIDs = gameBasics.map( (a, i) => `${a.gameid}`).join(',');\r\n\r\n        fetch('https://www.boardgamegeek.com/xmlapi2/thing?stats=1&id=' + gameIDs)\r\n            .then(response => response.text())\r\n            .then(text => {\r\n            const options = {\r\n                ignoreAttributes : false,\r\n                parseAttributeValue : true,\r\n                attributeNamePrefix : \"_\" \r\n            }\r\n\r\n            /* The BGG API returns XML, so it needs to be converted to JSON */\r\n            let Parser = require('fast-xml-parser');\r\n            let gameData = Parser.parse(text, options);\r\n\r\n            const arr = Object.keys(gameData.items.item).map((key) => gameData.items.item[key]);\r\n\r\n            const reduced = [];\r\n\r\n            arr.forEach( (game, index) => {\r\n                let obj = {};\r\n                let title='';\r\n                let rank='';\r\n                let mechanics = '';\r\n\r\n                /* Ideally this would get replaced by a full regex, but for now these are the only special characters \r\n                    we need to worry about\r\n                */\r\n                if(Array.isArray(game.name)) {\r\n                    title = game.name[0]._value.replace('&#039;', '\\'').replace('&amp;', '&');\r\n                } else {\r\n                    title = game.name._value.replace('&#039;', '\\'').replace('&amp;', '&');;\r\n                }\r\n\r\n                if(Array.isArray(game.statistics.ratings.ranks.rank)) {\r\n                    rank = game.statistics.ratings.ranks.rank[0]._value;\r\n                } else {\r\n                    rank = game.statistics.ratings.ranks.rank._value;\r\n                }\r\n\r\n                game.link.forEach( (item) => {\r\n                    if (item._type==='boardgamemechanic') {\r\n                        mechanics = mechanics + item._value + ', ';\r\n                    }\r\n                })\r\n\r\n                 obj.id = game._id;\r\n                 obj.rank = rank;\r\n                 obj.title = title;\r\n                 obj.mechanics = mechanics.substring(0, mechanics.length-2);\r\n                 obj.weight = game.statistics.ratings.averageweight._value;\r\n                 obj.playingTime = game.playingtime._value;\r\n                 \r\n                 reduced.push(obj);\r\n\r\n            })\r\n\r\n            this.setState({ gameDetails: reduced});            \r\n        });\r\n    } \r\n\r\n    convertMinsToHrsMins = (mins) => {\r\n        let h = Math.floor(mins / 60);\r\n        let m = mins % 60;\r\n        m = m < 10 ? '0' + m : m;\r\n        return `${h}:${m}`;\r\n    }\r\n\r\n    /* These show and hide the tooltips on the Victory chart when the title is hovered in the table. */\r\n    onHighlight = (key) => {\r\n        const gameid = String(key);\r\n        console.log('highlight ' + gameid);\r\n        this.setState({\r\n            externalMutations: [{\r\n                childName: \"data\",\r\n                target: \"labels\",\r\n                eventKey: gameid,\r\n                mutation: () => ({ active: true })\r\n            }]\r\n        });\r\n    }\r\n\r\n    onResetHighlight = (key) => {\r\n        const gameid = String(key);\r\n\r\n        this.setState({\r\n            externalMutations: [{\r\n                childName: \"data\",\r\n                target: \"labels\",\r\n                eventKey: gameid,\r\n                mutation: () => ({ active: false })\r\n            }]\r\n        });\r\n    }\r\n\r\n    onSort = (event, key) => {\r\n        const arr = this.state.gameDetails;\r\n        const dir = event.currentTarget.dataset.direction;\r\n\r\n        if (dir==='asc') {\r\n            arr.sort((a,b) => {\r\n                if (isNaN(a[key])) {\r\n                    return a[key].localeCompare(b[key]);\r\n                } else {\r\n                    return a[key]-b[key];\r\n                }\r\n            });\r\n            event.target.setAttribute('data-direction', 'desc');\r\n        } else {\r\n            arr.sort((a,b) => {\r\n                if (isNaN(b[key])) {\r\n                    return b[key].localeCompare(a[key]);\r\n                } else {\r\n                    return b[key]-a[key];\r\n                }\r\n            });\r\n            event.target.setAttribute('data-direction', 'asc');\r\n        }\r\n        this.setState({ gameDetails: arr});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <article>\r\n                <GameChart \r\n                    data={this.state.gameDetails} \r\n                    mutations={this.state.externalMutations} \r\n                    convert={this.convertMinsToHrsMins} \r\n                />\r\n                <GameTable \r\n                    data={this.state.gameDetails} \r\n                    sorted={this.onSort} \r\n                    mousedOver={this.onHighlight} \r\n                    mousedOut={this.onResetHighlight} \r\n                />\r\n            </article>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Layout } from './containers/Layout/Layout';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      title: 'The Weight of Trains'\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>{this.state.title}</h1>\r\n        <Layout />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}